# Script for building CCTBX on linux and macOS
#
# Variables:
#   CONDA: Linux, MacOSX
#   OS: linux-64, osx-64
#   PYTHON_VERSION: py27, py36, py37, py38
#   MODULES: <modules artifact name>
#
# Optional Parameters:
#   distribution: centos, ubuntu
#   version: [6, 10]
#   builder: cctbx builder

steps:

# download components
- checkout: none

# download public key
- task: DownloadSecureFile@1
  name: private_key
  inputs:
    secureFile: 'file_key'
  displayName: Download private key

# install miniforge
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_data_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_data_cache.pipelineID)'
    artifact: 'miniforge'
    path: $(Pipeline.Workspace)/miniforge
  displayName: Download miniforge

- script: |
    set -xe
    bash $(Pipeline.Workspace)/miniforge/Miniforge3-$(CONDA)-x86_64.sh -b -u -p $(Pipeline.Workspace)/miniforge
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda install -n base -y mamba
  displayName: Install miniforge and mamba

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: $(MODULES)
    path: $(Pipeline.Workspace)
  displayName: Download modules tarball

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: password
    path: $(Pipeline.Workspace)
  displayName: Download password

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda create -y -n openssl openssl=1.1
    conda activate openssl
    cd $(Pipeline.Workspace)
    openssl rsautl -decrypt -inkey $(private_key.secureFilePath) -in password.enc -out password
    openssl enc -d \
      -aes-256-cbc \
      -md sha256 \
      -iter 100000 \
      -pbkdf2 \
      -in modules.enc \
      -out modules.tar \
      -pass file:./password
    rm modules.enc
    tar -xf modules.tar
    rm modules.tar
  displayName: Extract modules tarball

# download test data
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: 'chem_data'
    path: $(Pipeline.Workspace)/modules
  displayName: Download chem_data

- script: |
    cd $(Pipeline.Workspace)/modules
    tar -xf chem_data.tar
    rm chem_data.tar
  displayName: Extract chem_data tarball

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: 'phenix_regression'
    path: $(Pipeline.Workspace)/modules
  displayName: Download phenix_regression

- script: |
    cd $(Pipeline.Workspace)/modules
    tar -xf phenix_regression.tar
    rm phenix_regression.tar
  displayName: Extract phenix_regression tarball

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: 'phenix_examples'
    path: $(Pipeline.Workspace)/modules
  displayName: Download phenix_examples

- script: |
    cd $(Pipeline.Workspace)/modules
    tar -xf phenix_examples.tar
    rm phenix_examples.tar
  displayName: Extract phenix_examples tarball

- script: |
    set -xe
    cd $(Pipeline.Workspace)
    ln -s modules/cctbx_project/libtbx/auto_build/bootstrap.py
  displayName: Link bootstrap.py

# create conda environment
# fresh downloads for "Update build cache" and "Full" pipelines
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'current'
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download conda packages
  condition: >
    or(eq(variables['Build.DefinitionName'], 'Update build cache'),
       eq(variables['Build.DefinitionName'], 'Full'))

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.build_cache.projectID)'
    pipeline: '$(resources.pipeline.build_cache.pipelineID)'
    allowPartiallySucceededBuilds: true
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download cached conda packages
  condition: >
    and(ne(variables['Build.DefinitionName'], 'Update build cache'),
        ne(variables['Build.DefinitionName'], 'Full'))

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda install -y conda-build
    cd $(Pipeline.Workspace)/channel
    conda index .
    echo @EXPLICIT > env.txt
    for filename in `cat filenames.txt`; do
      echo file://$(Pipeline.Workspace)/channel/${filename} >> env.txt
    done
  displayName: Build local channel

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda config --set channel_priority flexible
    mamba create -y --offline -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)/channel/env.txt
    mamba install -y -c conda-forge --freeze-installed --no-deps -n $(PYTHON_VERSION) junit-xml
  displayName: Create conda environment

# - script: |
#     set -xe
#     source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
#     conda remove -y --force -n $(PYTHON_VERSION) llvm-openmp
#   condition: eq('${{ parameters.version[0] }}', 6)
#   displayName: Remove OpenMP headers from conda environment

# - script: |
#     source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
#     conda remove -y --force -n $(PYTHON_VERSION) boost boost-cpp
#     conda install -y --no-deps -c cctbx-old-abi -n $(PYTHON_VERSION) boost boost-cpp
#   displayName: Use Boost from cctbx-old-abi channel
#   condition: or(eq('${{ parameters.version[0] }}', 6), eq('${{ parameters.version[0] }}', 7), eq('${{ parameters.version[0] }}', 14))

# build
# rebuild missing dispatchers
# fix cache for macOS
# rebuild caches
- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    python bootstrap.py build --builder=${{ parameters.builder }} --use-conda=${CONDA_PREFIX} --nproc=4
    source ./build/setpaths.sh
    rm -fr $(Pipeline.Workspace)/modules/chem_data/rotarama_data/*.pickle $(Pipeline.Workspace)/modules/chem_data/rotarama_data/*.dlite
    rm -fr $(Pipeline.Workspace)/modules/chem_data/cablam_data/*.pickle $(Pipeline.Workspace)/modules/chem_data/cablam_data/*.dlite
    mmtbx.rebuild_rotarama_cache
    mmtbx.rebuild_cablam_cache
  displayName: Configure and Build

# test
- script: |
    set -xe
    df -H
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    source ./build/setpaths.sh
    mkdir tests
    cd tests
    export PYTHONDEVMODE=1
    phenix_regression.test_all_parallel nproc=3
    df -H
  failOnStderr: false
  displayName: Test

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Pipeline.Workspace)/tests/output.xml'
