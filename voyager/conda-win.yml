# Script for building CCTBX
# Windows image description
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2016-Readme.md
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md
#
# Template Parameters:
#   builder: cctbx builder
#
# Parameters:
#   vmImage: vs2017-win2016, windows-2019
#   vs: vs2015, vs2017
#   modules: <modules artifact name>

jobs:
- job: vs${{ parameters.vs }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  timeoutInMinutes: 360
  strategy:
    maxParallel: 2
    matrix:
      python3.7:
        OS: win-64
        PYTHON_VERSION: py37
        MODULES: ${{ parameters.modules }}
      python3.8:
        OS: win-64
        PYTHON_VERSION: py38
        MODULES: ${{ parameters.modules }}
      python3.9:
        OS: win-64
        PYTHON_VERSION: py39
        MODULES: ${{ parameters.modules }}

  variables:
    artifact_name: vs${{ parameters.vs }}_$(PYTHON_VERSION)
    day: $(Get-Date -Format dddd)
    temp: "C:\\Miniconda3\\envs\\temp\\working"

  steps:
  - powershell: |
      Write-Host $(day)
      Write-Host "##vso[task.setVariable variable=day]$(day)"
    displayName: Get day of week

  - powershell: Write-Host $(day)
    displayName: Check day of week

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  # download components
  - checkout: none

  # download daily cached build directory for builds
  # always do builds from scratch (starting with cctbx build) on Saturday night (Pacific)
  # - task: DownloadPipelineArtifact@2
  #   inputs:
  #     source: 'specific'
  #     project: '$(resources.pipeline.cctbx_build_cache.projectID)'
  #     pipeline: '$(resources.pipeline.cctbx_build_cache.pipelineID)'
  #     allowPartiallySucceededBuilds: true
  #     allowFailedBuilds: true
  #     artifact: '$(artifact_name)'
  #     path: $(Pipeline.Workspace)
  #   displayName: Download cached build
  #   condition: >
  #     and(or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
  #                ne(variables['day'], 'Sunday')),
  #            eq(variables['Build.DefinitionName'], 'CI'),
  #            eq(variables['Build.DefinitionName'], 'CI branch'),
  #            eq(variables['Build.DefinitionName'], 'Full')),
  #         ne(variables['SKIP_CACHED_BUILD'], 'true'))
  #   continueOnError: true

  # - task: DownloadPipelineArtifact@2
  #   inputs:
  #     source: 'specific'
  #     project: '$(resources.pipeline.build_cache.projectID)'
  #     pipeline: '$(resources.pipeline.build_cache.pipelineID)'
  #     allowPartiallySucceededBuilds: true
  #     allowFailedBuilds: true
  #     artifact: '$(artifact_name)'
  #     path: $(Pipeline.Workspace)
  #   displayName: Download cached build
  #   condition: >
  #     and(or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
  #                ne(variables['day'], 'Sunday')),
  #            eq(variables['Build.DefinitionName'], 'CI'),
  #            eq(variables['Build.DefinitionName'], 'CI branch'),
  #            eq(variables['Build.DefinitionName'], 'Full')),
  #         ne(variables['SKIP_CACHED_BUILD'], 'true'))
  #   continueOnError: true

  # - script: |
  #     cd $(Pipeline.Workspace)
  #     tar -xf build.tar
  #     del build.tar
  #   displayName: Extract build tarball
  #   condition: >
  #     and(or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
  #                ne(variables['day'], 'Sunday')),
  #            eq(variables['Build.DefinitionName'], 'CI'),
  #            eq(variables['Build.DefinitionName'], 'CI branch'),
  #            eq(variables['Build.DefinitionName'], 'Full')),
  #         ne(variables['SKIP_CACHED_BUILD'], 'true'))
  #   continueOnError: true
  #   failOnStderr: false

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  - task: DownloadPipelineArtifact@2
    displayName: Download modules tarball
    inputs:
      source: 'current'
      artifact: $(MODULES)
      path: $(Pipeline.Workspace)

  - script: |
      cd $(Pipeline.Workspace)
      tar -xf modules.tar
      del modules.tar
    displayName: Extract modules tarball

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  - script: |
      cd $(Pipeline.Workspace)
      copy modules\cctbx_project\libtbx\auto_build\bootstrap.py .
    displayName: Copy bootstrap.py

  # create conda environment
  # fresh downloads for "Update build cache" and "Full" pipelines
  - task: DownloadPipelineArtifact@2
    displayName: Download conda packages
    inputs:
      source: 'current'
      artifact: $(PYTHON_VERSION)_$(OS)
      path: $(Pipeline.Workspace)/channel
    condition: >
      or(eq(variables['Build.DefinitionName'], 'Update build cache'),
         eq(variables['Build.DefinitionName'], 'Full'))

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.build_cache.projectID)'
      pipeline: '$(resources.pipeline.build_cache.pipelineID)'
      allowPartiallySucceededBuilds: true
      artifact: $(PYTHON_VERSION)_$(OS)
      path: $(Pipeline.Workspace)/channel
    displayName: Download cached conda packages
    condition: >
      and(ne(variables['Build.DefinitionName'], 'Update build cache'),
          ne(variables['Build.DefinitionName'], 'Full'))

  - script: |
      call %CONDA%\condabin\conda.bat install -y conda-build
      cd $(Pipeline.Workspace)\channel
      more filenames.txt
      dir
      call %CONDA%\condabin\conda.bat index .
      echo @EXPLICIT > env.txt
      for /f "tokens=*" %%f in (filenames.txt) do echo $(Pipeline.Workspace)\channel\%%f >> env.txt
      more env.txt
      dir
    displayName: Build local channel
    retryCountOnTaskFailure: 3

  # call %CONDA%\condabin\conda.bat create -y -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)\modules\cctbx_project\libtbx\auto_build\conda_envs\cctbx_%PYTHON_VERSION%_%OS%.txt
  - script: |
      call %CONDA%\condabin\conda.bat remove -y --all -n $(PYTHON_VERSION)
      if %errorlevel% neq 0 exit /b %errorlevel%
      call %CONDA%\condabin\conda.bat create -y --offline -c $(Pipeline.Workspace)\channel\ --override-channels -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)\channel\env.txt
      if %errorlevel% neq 0 exit /b %errorlevel%
      call %CONDA%\condabin\conda.bat install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml pytest=7.0
      if %errorlevel% neq 0 exit /b %errorlevel%
    displayName: Create conda environment

  - script: |
      rmdir /S /Q $(Pipeline.Workspace)\channel
    displayName: Clean up conda channel

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  - script: |
      cd $(Pipeline.Workspace)
      if exist "C:\Program Files (x86)\Microsoft Visual Studio\${{ parameters.vs }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" (
        call "C:\Program Files (x86)\Microsoft Visual Studio\${{ parameters.vs }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      )
      if exist "C:\Program Files\Microsoft Visual Studio\${{ parameters.vs }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" (
        call "C:\Program Files\Microsoft Visual Studio\${{ parameters.vs }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      )
      call %CONDA%\condabin\activate.bat %PYTHON_VERSION%
      python bootstrap.py build --builder=${{ parameters.builder }} --use-conda=%CONDA_PREFIX% --nproc=4
    displayName: Configure and Build
    retryCountOnTaskFailure: 3

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  # test
  - script: |
      cd $(Pipeline.Workspace)
      call .\build\setpaths.bat
      rmdir /S /Q tests
      mkdir tests
      cd tests
      set PYTHONDEVMODE=1
      set PYTHONTRACEMALLOC=1
      libtbx.run_tests_parallel ^
        module=voyager_regression ^
        verbosity=2 ^
        nproc=4
    failOnStderr: false
    displayName: Test
    retryCountOnTaskFailure: 3

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Pipeline.Workspace)\tests\output.xml'

  # preserve permissions
  # delete modules directory to free space for tarball
  - script: |
      cd $(Pipeline.Workspace)
      rmdir /Q /S modules
      tar -chzf build.tar build
    displayName: Build tarball
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true

  # cache build directory every week for regular optimization build
  - publish: $(Pipeline.Workspace)/build.tar
    artifact: $(artifact_name)
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true
