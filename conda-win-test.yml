# Script for building CCTBX
# Windows image description
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2016-Readme.md
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md
#
# Template Parameters:
#   builder: cctbx builder
#
# Parameters:
#   vmImage: vs2017-win2016, windows-2019
#   vs: vs2015, vs2017
#   modules: <modules artifact name>

jobs:
- job: ${{ parameters.vs }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  timeoutInMinutes: 360
  strategy:
    maxParallel: 2
    matrix:
      python2.7:
        OS: win-64
        PYTHON_VERSION: py27
        MODULES: ${{ parameters.modules }}
      python3.6:
        OS: win-64
        PYTHON_VERSION: py36
        MODULES: ${{ parameters.modules }}
      # python3.7:
      #   OS: win-64
      #   PYTHON_VERSION: py37
      #   MODULES: ${{ parameters.modules }}
      # python3.8:
      #   OS: win-64
      #   PYTHON_VERSION: py38
      #   MODULES: ${{ parameters.modules }}

  variables:
    artifact_name: ${{ parameters.vs }}_$(PYTHON_VERSION)
    day: $(Get-Date -Format dddd)
    temp: "C:\\Miniconda3\\envs\\temp\\working"

  steps:
  - powershell: |
      Write-Host $(day)
      Write-Host "##vso[task.setVariable variable=day]$(day)"
    displayName: Get day of week

  - powershell: Write-Host $(day)
    displayName: Check day of week

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  # install compilers
  - script: |
      choco install vcpython27 -fdv -y --debug
    condition: and(eq(variables['PYTHON_VERSION'], 'py27'),
                   eq('${{ parameters.vs }}', 'vs2015'))
    displayName: Install vcpython27.msi

  - powershell: |
      Set-PSDebug -Trace 1

      $batchcontent = @"
      ECHO ON
      SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0

      DIR "%vcpython%"

      CALL "%vcpython%\vcvarsall.bat" %*
      "@

      $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
      $batchPath = "$batchDir" + "\vcvarsall.bat"
      New-Item -Path $batchPath -ItemType "file" -Force

      Set-Content -Value $batchcontent -Path $batchPath

      Get-ChildItem -Path $batchDir

      Get-ChildItem -Path ($batchDir + '\..')
    condition: and(eq(variables['PYTHON_VERSION'], 'py27'),
                   eq('${{ parameters.vs }}', 'vs2015'))
    displayName: Patch vs2008

  - script: |
      choco install microsoft-visual-cpp-build-tools
    condition: and(not(eq(variables['PYTHON_VERSION'], 'py27')),
                       eq('${{ parameters.vs }}', 'vs2015'))
    displayName: Install Visual C++ Build Tools 2015

  # download components
  - checkout: none

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.ci.projectID)'
      pipeline: '$(resources.pipeline.ci.pipelineID)'
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifact: '$(artifact_name)'
      path: $(Pipeline.Workspace)
    displayName: Download cached build

  - script: |
      cd $(Pipeline.Workspace)
      tar -xf build.tar
      del build.tar
    displayName: Extract build tarball
    condition: >
      or(and(eq(variables['PYTHON_VERSION'], 'py27'),
             eq('${{ parameters.vs }}', 'vs2015')),
         ne(variables['PYTHON_VERSION'], 'py27'))
    continueOnError: true
    failOnStderr: false

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  - powershell: |
      cd $(Pipeline.Workspace)\build
      gci -rec *.obj | rm
    displayName: Delete obj files

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  # download public key
  - task: DownloadSecureFile@1
    name: private_key
    inputs:
      secureFile: 'file_key'
    displayName: Download private key

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.data_cache.projectID)'
      pipeline: '$(resources.pipeline.data_cache.pipelineID)'
      artifact: $(MODULES)
      path: $(Pipeline.Workspace)
    displayName: Download modules tarball

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.data_cache.projectID)'
      pipeline: '$(resources.pipeline.data_cache.pipelineID)'
      artifact: password
      path: $(Pipeline.Workspace)
    displayName: Download password

  - script: |
      echo on
      cd $(Pipeline.Workspace)
      openssl rsautl -decrypt -inkey $(private_key.secureFilePath) -in password.enc -out password
      openssl enc -d -aes-256-cbc -in modules.enc -out modules.tar -md sha256 -pass file:.\password
      del modules.enc
      tar -xf modules.tar
      del modules.tar
    displayName: Extract modules tarball

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  # download test data

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.data_cache.projectID)'
      pipeline: '$(resources.pipeline.data_cache.pipelineID)'
      artifact: 'chem_data'
      path: $(Pipeline.Workspace)/modules/chem_data
    displayName: Download chem_data

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.data_cache.projectID)'
      pipeline: '$(resources.pipeline.data_cache.pipelineID)'
      artifact: 'phenix_regression'
      path: $(Pipeline.Workspace)/modules/phenix_regression
    displayName: Download phenix_regression

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.data_cache.projectID)'
      pipeline: '$(resources.pipeline.data_cache.pipelineID)'
      artifact: 'phenix_examples'
      path: $(Pipeline.Workspace)/modules/phenix_examples
    displayName: Download phenix_examples

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  - script: |
      cd $(Pipeline.Workspace)
      copy modules\cctbx_project\libtbx\auto_build\bootstrap.py .
    displayName: Copy bootstrap.py

  # create conda environment
  - script: |
      call %CONDA%\condabin\conda.bat install -y -n base conda=4.8
    displayName: Update conda

  # - task: DownloadPipelineArtifact@2
  #   displayName: Download conda packages
  #   inputs:
  #     source: 'current'
  #     artifact: $(PYTHON_VERSION)_$(OS)
  #     path: $(Pipeline.Workspace)/channel

  # - script: |
  #     call %CONDA%\condabin\conda.bat install -y conda-build
  #     cd $(Pipeline.Workspace)\channel
  #     more filenames.txt
  #     call %CONDA%\condabin\conda.bat index $(Pipeline.Workspace)\channel
  #     echo @EXPLICIT > env.txt
  #     for /f "tokens=*" %%f in (filenames.txt) do echo file:///$(Pipeline.Workspace)\channel\%%f >> env.txt
  #     more env.txt
  #   displayName: Build local channel

  - script: |
      # call %CONDA%\condabin\conda.bat create -y --offline -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)\channel\env.txt
      call %CONDA%\condabin\conda.bat create -y -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)\modules\phenix\conda_envs\phenix_%PYTHON_VERSION%_%OS%.txt
      call %CONDA%\condabin\conda.bat install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml
    displayName: Create conda environment

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host

  # test
  - script: |
      cd $(Pipeline.Workspace)
      call .\build\setpaths.bat
      mkdir tests
      cd tests
      phenix_regression.run_tests_parallel nproc=4
    condition: or(and(eq(variables['PYTHON_VERSION'], 'py27'),
                      eq('${{ parameters.vs }}', 'vs2015')),
                  ne(variables['PYTHON_VERSION'], 'py27'))
    failOnStderr: false
    displayName: Test

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Pipeline.Workspace)\tests\output.xml'

  - powershell: |
      Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
    displayName: Get disk information on host
