# Script for building CCTBX
# linux image descriptions
# https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1804-README.md
#
# Template Parameters:
#   pipeline: pipeline name
#
# Parameters:
#   distribution: centos, ubuntu
#   version: [6, 10]
#   modules: <modules artifact name>
#   builder: <cctbx builder>

jobs:
- job: ${{ format('{0}_{1}', parameters.distribution, join('_', parameters.version) ) }}
  pool:
    vmImage: ubuntu-20.04
  timeoutInMinutes: 360
  strategy:
    maxParallel: 2
    matrix:
      python3.9:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py39
        MODULES: ${{ parameters.modules }}
      python3.10:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py310
        MODULES: ${{ parameters.modules }}
      python3.11:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py311
        MODULES: ${{ parameters.modules }}
      python3.12:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py312
        MODULES: ${{ parameters.modules }}
      python3.13:
        CONDA: Linux
        OS: linux-64
        PYTHON_VERSION: py313
        MODULES: ${{ parameters.modules }}

  container:
    image: ${{ parameters.distribution }}:${{ join('.', parameters.version) }}
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"

  variables:
    artifact_name: ${{ parameters.distribution }}_${{ join('.', parameters.version) }}_$(PYTHON_VERSION)
    day: Sunday

  steps:
  - script: |
      day=`date +%A`
      echo $(day)
      echo "##vso[task.setVariable variable=day]$day"
    displayName: Get day of week

  - script: echo $(day)
    displayName: Check day of week

  # https://github.com/ApexAI/performance_test/blob/master/azure-pipelines.yml#L9-L17

  # centos setup
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "yum install -y sudo"
    displayName: Set up sudo for CentOS
    condition: or(eq('${{ parameters.distribution }}', 'centos'),
                  eq('${{ parameters.distribution }}', 'rockylinux'))

  - script: |
      set -xe
      sudo yum groupinstall -y 'Development Tools'
      sudo yum install -y mesa-libGLU-devel mesa-libGL-devel openssl tcsh
      locale -a
    displayName: Install dependencies for CentOS
    condition: or(eq('${{ parameters.distribution }}', 'centos'),
                  eq('${{ parameters.distribution }}', 'rockylinux'))

  - script: |
      echo "##vso[task.setvariable variable=LC_ALL]C.utf8"
    displayName: Setup locale for Rocky Linux
    condition: or(eq('${{ parameters.distribution }}', 'centos'),
                  eq('${{ parameters.distribution }}', 'rockylinux'))

  # ubuntu setup
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo for Ubuntu
    condition: eq('${{ parameters.distribution }}', 'ubuntu')

  - script: |
      sudo apt-get install -y build-essential curl git libgl1-mesa-dev libglu1-mesa-dev locales subversion tcsh
      sudo locale-gen en_US.UTF-8 en_GB.UTF-8
      sudo update-locale
    displayName: Install dependencies for Ubuntu
    condition: eq('${{ parameters.distribution }}', 'ubuntu')

  - script: |
      echo "##vso[task.setvariable variable=LC_ALL]en_US.utf8"
    displayName: Setup locale for Ubuntu
    condition: eq('${{ parameters.distribution }}', 'ubuntu')

  - script: |
      echo $(System.CollectionId)
      echo $(System.CollectionUri)
      echo $(System.TeamProject)
      echo $(System.TeamProjectId)
      echo $(System.DefinitionID)
    displayName: Show System variables

  # download daily cached build directory for builds
  # always do builds from scratch (starting with cctbx build) on Saturday night (Pacific)
  # always do builds from scratch for "Weekly" pipeline
  # - task: DownloadPipelineArtifact@2
  #   inputs:
  #     source: 'specific'
  #     project: '$(resources.pipeline.cctbx_build_cache.projectID)'
  #     pipeline: '$(resources.pipeline.cctbx_build_cache.pipelineID)'
  #     allowPartiallySucceededBuilds: true
  #     allowFailedBuilds: true
  #     artifact: '$(artifact_name)'
  #     path: $(Pipeline.Workspace)
  #   displayName: Download cached build
  #   condition: >
  #     and(eq(variables['Build.DefinitionName'], 'Update build cache'),
  #         eq(variables['day'], 'Sunday'))
  #   continueOnError: true

  # - task: DownloadPipelineArtifact@2
  #   inputs:
  #     source: 'specific'
  #     project: '$(resources.pipeline.build_cache.projectID)'
  #     pipeline: '$(resources.pipeline.build_cache.pipelineID)'
  #     allowPartiallySucceededBuilds: true
  #     allowFailedBuilds: true
  #     artifact: '$(artifact_name)'
  #     path: $(Pipeline.Workspace)
  #   displayName: Download cached build
  #   condition: >
  #     or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
  #            ne(variables['day'], 'Sunday')),
  #        eq(variables['Build.DefinitionName'], 'CI'),
  #        eq(variables['Build.DefinitionName'], 'CI branch'),
  #        eq(variables['Build.DefinitionName'], 'Full'))
  #   continueOnError: true

  # - script: |
  #     cd $(Pipeline.Workspace)
  #     tar -xf build.tar
  #     rm build.tar
  #   displayName: Extract build tarball
  #   continueOnError: true
  #   failOnStderr: false

  # build
  - template: ./unix-conda-build.yml
    parameters:
      distribution: ${{ parameters.distribution }}
      version: ${{ parameters.version }}
      builder: ${{ parameters.builder }}

  # preserve permissions
  - script: |
      cd $(Pipeline.Workspace)
      tar -chzf build.tar build
    displayName: Build tarball
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true

  # cache build directory every week for regular optimization build
  - publish: $(Pipeline.Workspace)/build.tar
    artifact: $(artifact_name)
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true
