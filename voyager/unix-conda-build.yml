# Script for building CCTBX on linux and macOS
#
# Variables:
#   CONDA: Linux, MacOSX
#   OS: linux-64, osx-64
#   PYTHON_VERSION: py39, py310, py311, py312, py313
#   MODULES: <modules artifact name>
#
# Optional Parameters:
#   distribution: centos, ubuntu
#   version: [6, 10]
#   builder: cctbx builder

steps:

# download components
- checkout: none

# install miniforge
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_data_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_data_cache.pipelineID)'
    artifact: 'miniforge'
    path: $(Pipeline.Workspace)/miniforge
  displayName: Download miniforge

- script: |
    set -xe
    bash $(Pipeline.Workspace)/miniforge/Miniforge3-$(CONDA)-x86_64.sh -b -u -p $(Pipeline.Workspace)/miniforge
  displayName: Install miniforge

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda update -y -n base conda
    conda update -y -n base --all
    conda info
  displayName: Update conda

- task: DownloadPipelineArtifact@2
  displayName: Download modules tarball
  inputs:
    source: 'current'
    artifact: $(MODULES)
    path: $(Pipeline.Workspace)

- script: |
    set -xe
    cd $(Pipeline.Workspace)
    tar -xf modules.tar
    rm -f modules.tar
  displayName: Extract modules tarball

- script: |
    set -xe
    rm -fr $(Pipeline.Workspace)/modules/boost
  displayName: Remove Boost sources

- script: |
    set -xe
    cd $(Pipeline.Workspace)
    ln -s modules/cctbx_project/libtbx/auto_build/bootstrap.py
  displayName: Link bootstrap.py

# create conda environment
# fresh downloads for "Update build cache" and "Full" pipelines
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'current'
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download conda packages
  condition: >
    or(eq(variables['Build.DefinitionName'], 'Update build cache'),
       eq(variables['Build.DefinitionName'], 'Full'))

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.build_cache.projectID)'
    pipeline: '$(resources.pipeline.build_cache.pipelineID)'
    allowPartiallySucceededBuilds: true
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download cached conda packages
  condition: >
    and(ne(variables['Build.DefinitionName'], 'Update build cache'),
        ne(variables['Build.DefinitionName'], 'Full'))

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda install -y conda-build
    cd $(Pipeline.Workspace)/channel
    conda index .
    echo @EXPLICIT > env.txt
    for filename in `cat filenames.txt`; do
      echo file://$(Pipeline.Workspace)/channel/${filename} >> env.txt
    done
  displayName: Build local channel
  retryCountOnTaskFailure: 3

- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda config --set channel_priority flexible
    conda create -y --offline -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)/channel/env.txt
    conda install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml
  displayName: Create conda environment

# build
- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    python bootstrap.py build \
      --builder=${{ parameters.builder }} \
      --use-conda=${CONDA_PREFIX} \
      --config-flags="--cxxstd=c++14" \
      --nproc=4
  displayName: Configure and Build
  retryCountOnTaskFailure: 3

# clean up matplotlib
- script: |
    set -xe
    rm -fr ~/.matplotlib
    rm -fr ~/.cache/fontconfig

    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    source ./build/setpaths.sh

    libtbx.python -c "import matplotlib.pyplot as plt"
    libtbx.python -c "import matplotlib; print(matplotlib.get_cachedir())"

  displayName: Clean up matplotlib
  continueOnError: true
  failOnStderr: false

# test
- script: |
    set -xe
    source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    source ./build/setpaths.sh
    rm -fr tests
    mkdir tests
    cd tests
    # export PYTHONDEVMODE=1
    # export PYTHONTRACEMALLOC=1
    libtbx.run_tests_parallel \
      module=crys3d \
      module=phaser_regression \
      module=voyager_regression \
      verbosity=2 \
      nproc=4
  failOnStderr: false
  displayName: Test
  retryCountOnTaskFailure: 3

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Pipeline.Workspace)/tests/output.xml'
