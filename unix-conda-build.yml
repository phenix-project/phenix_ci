# Script for building CCTBX on linux and macOS
#
# Variables:
#   CONDA: Linux, MacOSX
#   OS: linux-64, osx-64
#   PYTHON_VERSION: py27, py36, py37, py38
#   MODULES: <modules artifact name>
#
# Optional Parameters:
#   distribution: centos, ubuntu
#   version: [6, 10]
#   builder: cctbx builder
#   test_module: module for testing

steps:

# download components
- checkout: none

# download public key
- task: DownloadSecureFile@1
  name: private_key
  inputs:
    secureFile: 'id_rsa'
  displayName: Download private key

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: $(MODULES)
    path: $(Pipeline.Workspace)
  displayName: Download modules tarball

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: password
    path: $(Pipeline.Workspace)
  displayName: Download password

- script: |
    set -x -e
    cd $(Pipeline.Workspace)
    openssl rsautl -decrypt -inkey $(private_key.secureFilePath) -in password.enc -out password
    openssl enc -d -aes-256-cbc -in modules.enc -out modules.tar -md sha256 -pass file:./password
    rm modules.enc
    tar -xf modules.tar
    rm modules.tar
  displayName: Extract modules tarball

- script: |
    set -x -e
    cd $(Pipeline.Workspace)
    ln -s modules/cctbx_project/libtbx/auto_build/bootstrap.py
  displayName: Link bootstrap.py

# install miniconda
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_data_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_data_cache.pipelineID)'
    artifact: 'miniconda'
    path: $(Pipeline.Workspace)/miniconda
  displayName: Download miniconda

- script: |
    set -x -e
    bash $(Pipeline.Workspace)/miniconda/Miniconda3-latest-$(CONDA)-x86_64.sh -b -u -p $(Pipeline.Workspace)/miniconda
  displayName: Install miniconda

# create conda environment
# fresh downloads for "Update build cache" and "Full" pipelines
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'current'
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download conda packages
  condition: >
    or(eq(variables['Build.DefinitionName'], 'Update build cache'),
       eq(variables['Build.DefinitionName'], 'Full'))

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_build_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_build_cache.pipelineID)'
    allowPartiallySucceededBuilds: true
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download cached conda packages
  condition: >
    and(ne(variables['Build.DefinitionName'], 'Update build cache'),
        ne(variables['Build.DefinitionName'], 'Full'))

- script: |
    set -x -e
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda install -y conda-build
    cd $(Pipeline.Workspace)/channel
    conda index .
    echo @EXPLICIT > env.txt
    for filename in `cat filenames.txt`; do
      echo file://$(Pipeline.Workspace)/channel/${filename} >> env.txt
    done
  displayName: Build local channel

- script: |
    set -x -e
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda create -y --offline -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)/channel/env.txt
    conda install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml
  displayName: Create conda environment

- script: |
    set -x -e
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda remove -y --force -n $(PYTHON_VERSION) llvm-openmp
  condition: eq('${{ parameters.version[0] }}', 6)
  displayName: Remove OpenMP headers from conda environment

# - script: |
#     source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
#     conda remove -y --force -n $(PYTHON_VERSION) boost boost-cpp
#     conda install -y --no-deps -c cctbx-old-abi -n $(PYTHON_VERSION) boost boost-cpp
#   displayName: Use Boost from cctbx-old-abi channel
#   condition: or(eq('${{ parameters.version[0] }}', 6), eq('${{ parameters.version[0] }}', 7), eq('${{ parameters.version[0] }}', 14))

# build
- script: |
    set -x -e
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    python bootstrap.py build --builder=${{ parameters.builder }} --use-conda=${CONDA_PREFIX} --nproc=4
  displayName: Configure and Build

# test
# - script: |
#     set -x -e
#     source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
#     conda activate $(PYTHON_VERSION)
#     cd $(Pipeline.Workspace)
#     source ./build/setpaths.sh
#     mkdir tests
#     cd tests
#     libtbx.run_tests_parallel module=${{ parameters.test_module }} nproc=4
#   failOnStderr: false
#   displayName: Test
#   condition: not(eq('${{ parameters.test_module }}', 'phenix'))

# - script: |
#     set -x -e
#     source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
#     conda activate $(PYTHON_VERSION)
#     cd $(Pipeline.Workspace)
#     source ./build/setpaths.sh
#     mkdir tests
#     cd tests
#     phenix_regression.test_all_parallel nproc=4
#   failOnStderr: false
#   displayName: Test
#   condition: eq('${{ parameters.test_module }}', 'phenix')

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Pipeline.Workspace)/tests/output.xml'
