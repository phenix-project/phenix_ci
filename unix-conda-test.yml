# Script for building CCTBX on linux and macOS
#
# Variables:
#   CONDA: Linux, MacOSX
#   OS: linux-64, osx-64
#   PYTHON_VERSION: py27, py36, py37, py38
#   MODULES: <modules artifact name>
#
# Optional Parameters:
#   distribution: centos, ubuntu
#   version: [6, 10]
#   builder: cctbx builder

steps:

# download components
- checkout: none

# download public key
- task: DownloadSecureFile@1
  name: private_key
  inputs:
    secureFile: 'id_rsa'
  displayName: Download private key

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: $(MODULES)
    path: $(Pipeline.Workspace)
  displayName: Download modules tarball

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.data_cache.projectID)'
    pipeline: '$(resources.pipeline.data_cache.pipelineID)'
    artifact: password
    path: $(Pipeline.Workspace)
  displayName: Download password

- script: |
    set -x -e
    cd $(Pipeline.Workspace)
    openssl rsautl -decrypt -inkey $(private_key.secureFilePath) -in password.enc -out password
    openssl enc -d -aes-256-cbc -in modules.enc -out modules.tar -md sha256 -pass file:./password
    rm modules.enc
    tar -xf modules.tar
    rm modules.tar
  displayName: Extract modules tarball

# download test data
- task: InstallSSHKey@0
  inputs:
    knownHostsEntry: cci.lbl.gov,131.243.194.153 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAnPOtqyYASs6hc3fsmUQn92ovSozJsMsJyrMWjppUERX1tD4Fh0D7YaNhLvYpKi5mYVREo+tsKoOatCcqKGHCONWpzx7JHXUzfIBsy6nCeygRyyW4yuyoCuYFvOYLkaM4PrN/7XaZEnp1ux6/ZcbRxBDNK4f42svJUV39OX33tRuQWpP+O85paJr1ePHVz6U2n14a+3fRN3DBMti1dJuKOThU4djYEBQimx54pnW71eYORN2oUz+N/4RHAcomtxZpcUMl3Qadw8hD4s1XM6fzJ0Que7KefnnrPOgAEtZxKl9j09aaE70Oh+ie5Y6ckwddJ/4qZB5m2tBaEi3xuy0TSQ==
    sshPublicKey: ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA7XgVgdU9GmZuo5yVyW/htrAuxe7ypuq7IowWwfUC0WZw9SPzQ8kOGj63plF3ytx/qpgvUlS1AiywO20rZ83gHmRdAiuvt9laH09KlWEUhIhAQTzesqBG5aUT0MKo01yxijoRl5HC8w/MdOanc0h01e6IxnZvgG0N30RB1i4xVPCtR/VBmXSp4R0T+Q/gJjfQssuBxHVMrrute4V3uUHek58FL2QgUB0+zq6ipETjuCJxTSyYVAFtCYDPYs+0lAYYkWrXALCr9kX9s22jYtkyv5kNw6mEW8nhtA7GbTdJLv4M6/WYtcvQV8TDcNCfltOfl81U3gcZ9zhQDKGVoNaJEw== buildbot@cci.lbl.gov
    sshKeySecureFile: id_rsa
  displayName: Download SSH key

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_data_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_data_cache.pipelineID)'
    artifact: 'chem_data'
    path: $(Pipeline.Workspace)/modules/chem_data
  displayName: Download chem_data

- script: |
    if [ ! -d "$(Pipeline.Workspace)/modules/chem_data" ]; then
      svn co svn+ssh://builder@cci.lbl.gov/chem_data/trunk chem_data
    fi
    cd $(Pipeline.Workspace)/modules/chem_data
    svn update
  displayName: Update chem_data

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_data_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_data_cache.pipelineID)'
    artifact: 'phenix_regression'
    path: $(Pipeline.Workspace)/modules/phenix_regression
  displayName: Download phenix_regression

- script: |
    cd $(Pipeline.Workspace)/modules/phenix_regression
    git reset --hard origin/master
    git lfs install --local
    git pull --rebase
    git lfs pull
  displayName: Update phenix_regression

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_data_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_data_cache.pipelineID)'
    artifact: 'phenix_examples'
    path: $(Pipeline.Workspace)/modules/phenix_examples
  displayName: Download phenix_examples

- script: |
    cd $(Pipeline.Workspace)/modules/phenix_examples
    git reset --hard origin/master
    git lfs install --local
    git pull --rebase
    git lfs pull
  displayName: Update phenix_examples

- powershell: |
    Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{Name="Size(GB)";Expression={$_.size/1gb}}, @{Name="Free Space(GB)";Expression={$_.freespace/1gb}}, @{Name="Free (%)";Expression={"{0,6:P0}" -f(($_.freespace/1gb) / ($_.size/1gb))}}, DeviceID, DriveType | Where-Object DriveType -EQ '3'
  displayName: Get disk information on host

- script: |
    set -x -e
    cd $(Pipeline.Workspace)
    ln -s modules/cctbx_project/libtbx/auto_build/bootstrap.py
  displayName: Link bootstrap.py

# install miniconda
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.cctbx_data_cache.projectID)'
    pipeline: '$(resources.pipeline.cctbx_data_cache.pipelineID)'
    artifact: 'miniconda'
    path: $(Pipeline.Workspace)/miniconda
  displayName: Download miniconda

- script: |
    set -x -e
    bash $(Pipeline.Workspace)/miniconda/Miniconda3-latest-$(CONDA)-x86_64.sh -b -u -p $(Pipeline.Workspace)/miniconda
  displayName: Install miniconda

# create conda environment
# fresh downloads for "Update build cache" and "Full" pipelines
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'current'
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download conda packages
  condition: >
    or(eq(variables['Build.DefinitionName'], 'Update build cache'),
       eq(variables['Build.DefinitionName'], 'Full'))

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: '$(resources.pipeline.build_cache.projectID)'
    pipeline: '$(resources.pipeline.build_cache.pipelineID)'
    allowPartiallySucceededBuilds: true
    artifact: $(PYTHON_VERSION)_$(OS)
    path: $(Pipeline.Workspace)/channel
  displayName: Download cached conda packages
  condition: >
    and(ne(variables['Build.DefinitionName'], 'Update build cache'),
        ne(variables['Build.DefinitionName'], 'Full'))

- script: |
    set -x -e
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda install -y conda-build
    cd $(Pipeline.Workspace)/channel
    conda index .
    echo @EXPLICIT > env.txt
    for filename in `cat filenames.txt`; do
      echo file://$(Pipeline.Workspace)/channel/${filename} >> env.txt
    done
  displayName: Build local channel

- script: |
    set -x -e
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda create -y --offline -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)/channel/env.txt
    conda install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml
  displayName: Create conda environment

# - script: |
#     set -x -e
#     source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
#     conda remove -y --force -n $(PYTHON_VERSION) llvm-openmp
#   condition: eq('${{ parameters.version[0] }}', 6)
#   displayName: Remove OpenMP headers from conda environment

# - script: |
#     source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
#     conda remove -y --force -n $(PYTHON_VERSION) boost boost-cpp
#     conda install -y --no-deps -c cctbx-old-abi -n $(PYTHON_VERSION) boost boost-cpp
#   displayName: Use Boost from cctbx-old-abi channel
#   condition: or(eq('${{ parameters.version[0] }}', 6), eq('${{ parameters.version[0] }}', 7), eq('${{ parameters.version[0] }}', 14))

# test
- script: |
    set -x -e
    source $(Pipeline.Workspace)/miniconda/etc/profile.d/conda.sh
    conda activate $(PYTHON_VERSION)
    cd $(Pipeline.Workspace)
    source ./build/setpaths.sh
    mkdir tests
    cd tests
    phenix_regression.test_all_parallel nproc=4
  failOnStderr: false
  displayName: Test

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Pipeline.Workspace)/tests/output.xml'
